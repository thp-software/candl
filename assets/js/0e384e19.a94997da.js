"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=t(4848),r=t(8453);const i={sidebar_position:1},d="Quick Start",l={id:"intro",title:"Quick Start",description:"Installation",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/candl/docs/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Candl",permalink:"/candl/docs/Candl/"}},c={},o=[{value:"Installation",id:"installation",level:2},{value:"Explanation",id:"explanation",level:2},{value:"CandlSerie",id:"candlserie",level:3},{value:"CandlData",id:"candldata",level:4},{value:"CandlView",id:"candlview",level:4},{value:"Update",id:"update",level:3},{value:"Code",id:"code",level:2}];function s(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"npm i candl\n"})}),"\n",(0,a.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,a.jsx)(n.p,{children:"In this example, we will see how to setup a basic Candl chart."}),"\n",(0,a.jsx)(n.p,{children:"It will introduce you to some concepts of the library."}),"\n",(0,a.jsx)(n.h3,{id:"candlserie",children:"CandlSerie"}),"\n",(0,a.jsx)(n.p,{children:"We will first create a Serie with a TimeFrame (1M in this case) and a Symbol.\nThe symbol is optional and is the abbrevation of a company/index stock."}),"\n",(0,a.jsx)(n.p,{children:"A CandlSerie also contain an array of CandlData and an array of CandlView."}),"\n",(0,a.jsx)(n.h4,{id:"candldata",children:"CandlData"}),"\n",(0,a.jsx)(n.p,{children:"A CandlData is a simple interface that define all the data needed for a one candle."}),"\n",(0,a.jsx)(n.h4,{id:"candlview",children:"CandlView"}),"\n",(0,a.jsx)(n.p,{children:"A CandlView define the way to render the chart on the screen.\nIt contain (among others) a zoom factor and a type of render (Candle, Line, Area, ...).\nYou typically iterate through the array of CandlView with Mouse Wheel."}),"\n",(0,a.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,a.jsx)(n.p,{children:"Update (or Redrawing) the chart is handle by the library based on inputs event."}),"\n",(0,a.jsx)(n.p,{children:"But not when a serie data or views are set."}),"\n",(0,a.jsx)(n.p,{children:"So in this case we need to forceUpdate."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"forceUpdate()"})," Redraw every elements of the chart."]}),"\n",(0,a.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,a.jsx)(n.p,{children:"This is a React Component using Candl."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { useEffect, useRef } from "react";\nimport {\n  Candl,\n  CandlMock,\n  CandlSerie,\n  CandlTimeFrame,\n  get1MBaseViews,\n} from "candl";\n\nconst CandlWrapper: React.FC = () => {\n  // Reference to the container of the chart\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  // Reference to the chart\n  const candlRef = useRef<Candl | null>(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      // Create the chart\n      candlRef.current = new Candl(containerRef.current);\n\n      // Create a serie for 1M TimeFrame\n      const mySerie: CandlSerie = new CandlSerie(CandlTimeFrame.Time1Minute);\n\n      // Add mocked data with 10 000 candles\n      mySerie.setData(\n        CandlMock.generateMockData(CandlTimeFrame.Time1Minute, 10000)\n      );\n\n      // Add default 1M base views to the serie\n      mySerie.setViews(get1MBaseViews());\n\n      // Add serie to Candl\n      candlRef.current.addSerie(CandlTimeFrame.Time1Minute, mySerie);\n\n      // Jump to the end of the chart\n      candlRef.current.setOffset({\n        x: candlRef.current.getLastCandleOffset(),\n        y: candlRef.current.getOffset().y,\n      });\n\n      // Force update of the chart\n      candlRef.current.forceUpdate();\n    }\n\n    return () => {\n      // Don\'t forget to clean the chart\n      if (candlRef.current != null) {\n        candlRef.current.clean();\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      style={{\n        position: "relative",\n        width: "100%",\n        height: "100%",\n      }}\n      ref={containerRef}\n    />\n  );\n};\nexport default CandlWrapper;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var a=t(6540);const r={},i=a.createContext(r);function d(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);